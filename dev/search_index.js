var documenterSearchIndex = {"docs":
[{"location":"#CNNSeq2exp","page":"Home","title":"CNNSeq2exp","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for CNNSeq2exp.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#CNNSeq2exp.motifs","page":"Home","title":"CNNSeq2exp.motifs","text":"pfms: A vector where...         {1st, 2nd,...} component :         key is the {1st, 2nd,...} entry in keyst         value is the {1st, 2nd,...} entry in valuest         stores the pfms for the training set similarly for pfmstrainshuffled, pfmstest, pfmstest_shuffled\n\n\n\n\n\n","category":"type"},{"location":"#CNNSeq2exp.sequence_data","page":"Home","title":"CNNSeq2exp.sequence_data","text":"fid: hdf5 file seqlen: length of the sequence (assume for now that all sequences have the same length) numseqsegments: number of sequence segments (number of input sequences) numheads: number of heads (number of differny y values) numseqs: number of sequences in the dataset permuteindices_train: indices for permuting the sequence (for training)\n\n\n\n\n\n","category":"type"},{"location":"#CNNSeq2exp.get_num_seq_segments_and_heads-Tuple{HDF5.File}","page":"Home","title":"CNNSeq2exp.get_num_seq_segments_and_heads","text":"Get the number of sequence segments and heads from the hdf5 file.     fid: hdf5 file, obtain via, e.g.,          h5open(<filepath>, \"r\")\n\n\n\n\n\n","category":"method"},{"location":"#CNNSeq2exp.make_fasta_file-Union{Tuple{T}, Tuple{Vector{T}, Any}} where T<:AbstractString","page":"Home","title":"CNNSeq2exp.make_fasta_file","text":"Take in a vector of (vector of two strings)     1st string: header     2nd string: sequence and then make a fasta file\n\n\n\n\n\n","category":"method"},{"location":"#CNNSeq2exp.make_new_permuted_indices!-Tuple{CNNSeq2exp.sequence_data}","page":"Home","title":"CNNSeq2exp.make_new_permuted_indices!","text":"Make new permuted indices for the training data. sd: sequencedata loadhow_many: how many data entries to load each time\n\n\n\n\n\n","category":"method"},{"location":"#CNNSeq2exp.num_mega_batches_train-Tuple{CNNSeq2exp.sequence_data}","page":"Home","title":"CNNSeq2exp.num_mega_batches_train","text":"Get the number of mega batches for training.     nummegabatches: number of mega batches     sd: sequence_data\n\n\n\n\n\n","category":"method"},{"location":"#CNNSeq2exp.one_hot_to_seq-Union{Tuple{AbstractMatrix{T}}, Tuple{T}} where T<:Real","page":"Home","title":"CNNSeq2exp.one_hot_to_seq","text":"Take an one-hot encoded sequence and convert it to ACGT string\n\n\n\n\n\n","category":"method"},{"location":"#CNNSeq2exp.render_motifs-NTuple{4, Any}","page":"Home","title":"CNNSeq2exp.render_motifs","text":"Render the motifs \n\n\n\n\n\n","category":"method"},{"location":"#CNNSeq2exp.take_pretrained_and_render-NTuple{4, String}","page":"Home","title":"CNNSeq2exp.take_pretrained_and_render","text":"fp: file path for the formatted hdf5 file;     that contains the sequence and label information, hploadpath: path to the hyperparameters file;     this file should be in the jld2 format modelloadpath: path to the model file;     this file should be in the jld2 format save_where: a folder path to save the results;     note that the folder will be created if it does not exist. UPTO: maximum number of filters in the coalition to be considered.\n\n\n\n\n\n","category":"method"},{"location":"#CNNSeq2exp.train_and_render-Tuple{String, String}","page":"Home","title":"CNNSeq2exp.train_and_render","text":"fp: file path for the formatted hdf5 file;     that contains the sequence and label information, save_where: a folder path to save the results;     note that the folder will be created if it does not exist. UPTO: maximum number of filters in the coalition to be considered.\n\n\n\n\n\n","category":"method"},{"location":"#CNNSeq2exp.train_model-Tuple{Any}","page":"Home","title":"CNNSeq2exp.train_model","text":"Inputs:      fp: file path     hp: hyperparameters         if nothing, then random hyperparameters are generated     lastembeddinglenmax: max length of the last embedding     nepochs: number of epochs to train the model Outputs:     hp: hyperparameters     m: trained model\n\n\n\n\n\n","category":"method"}]
}
